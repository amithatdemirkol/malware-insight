# modules/signature_check.py

import hashlib
import os

def get_file_signature(file_path, algorithm='sha256'):
    """
    Retrieves the file's signature (hash).
    :param file_path: Path of the file to be analyzed
    :param algorithm: Hash algorithm to be used (sha256, sha1, md5)
    :return: The file's signature
    """
    hash_func = None
    if algorithm == 'sha256':
        hash_func = hashlib.sha256()
    elif algorithm == 'sha1':
        hash_func = hashlib.sha1()
    elif algorithm == 'md5':
        hash_func = hashlib.md5()
    else:
        raise ValueError("Unsupported algorithm. Please choose 'sha256', 'sha1', or 'md5'.")

    try:
        with open(file_path, "rb") as f:
            # Reading the file in chunks
            for byte_block in iter(lambda: f.read(4096), b""):
                hash_func.update(byte_block)
        print(f"Signature ({algorithm}) of the file {os.path.basename(file_path)} has been calculated.")
        return hash_func.hexdigest()
    except FileNotFoundError:
        print(f"Error: File not found - {file_path}")
        return None
    except Exception as e:
        print(f"An error occurred during hash calculation: {e}")
        return None

def check_signature(signature, known_signatures):
    """
    Compares the file signature with known malware signatures.
    :param signature: The file's signature
    :param known_signatures: List of known malware signatures
    :return: Match status (True/False)
    """
    if signature is None:
        print("Error: Invalid signature.")
        return False
    
    if signature in known_signatures:
        print(f"Match found: {signature} with known malware signatures.")
        return True
    else:
        print(f"No match found: {signature} with known malware signatures.")
        return False
