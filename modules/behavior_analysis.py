# modules/behavior_analysis.py

import yara

def load_yara_rules(rule_path):
    """
    Loads YARA rules from a file.
    :param rule_path: Path of the YARA rule file
    :return: YARA rules or None
    """
    try:
        print(f"Loading YARA rules from the file {rule_path}...")
        rules = yara.compile(filepath=rule_path)
        print(f"YARA rules successfully loaded: {rule_path}")
        return rules
    except yara.SyntaxError as e:
        print(f"There is a syntax error in the YARA rule file: {e}")
    except Exception as e:
        print(f"An error occurred while loading YARA rules: {e}")
    return None

def analyze_file_with_yara(file_path, rules):
    """
    Analyzes the file against YARA rules.
    :param file_path: Path of the file to be analyzed
    :param rules: YARA rules
    :return: Detailed list of matching rules
    """
    try:
        print(f"Analyzing the file {file_path} with YARA rules...")
        matches = rules.match(file_path)

        if matches:
            print(f"YARA analysis completed, {len(matches)} rules matched.")
            # Detailing the matches
            detailed_matches = []
            for match in matches:
                match_details = {
                    'rule': match.rule,
                    'meta': match.meta,
                    'strings': match.strings,
                    'tags': match.tags
                }
                detailed_matches.append(match_details)
            return detailed_matches
        else:
            print("YARA analysis completed, no malicious activity detected.")
            return []

    except yara.Error as e:
        print(f"An error occurred during YARA analysis: {e}")
        return []
    except Exception as e:
        print(f"An error occurred while analyzing the file with YARA rules: {e}")
        return []
